"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ArrangeActChain = function () {
    function ArrangeActChain() {
        _classCallCheck(this, ArrangeActChain);
    }

    _createClass(ArrangeActChain, [{
        key: "setup",
        value: function setup(actList, context) {
            this._actList = actList;
            this._context = context;
        }
    }, {
        key: "execute",
        value: function () {
            var _ref = _asyncToGenerator(function* () {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = this._actList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var act = _step.value;

                        yield act(this._context);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            });

            function execute() {
                return _ref.apply(this, arguments);
            }

            return execute;
        }()
    }, {
        key: "executeSync",
        value: function executeSync() {
            var _this = this;

            this._actList.forEach(function (act) {
                act(_this._context);
            });
        }
    }, {
        key: "actList",
        get: function get() {
            return this._actList;
        }
    }, {
        key: "context",
        get: function get() {
            return this._context;
        }
    }]);

    return ArrangeActChain;
}();

exports.default = ArrangeActChain;
//# sourceMappingURL=arrangeActChain.js.map