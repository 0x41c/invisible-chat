'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var nameHelper = function () {
    function nameHelper() {
        _classCallCheck(this, nameHelper);
    }

    _createClass(nameHelper, null, [{
        key: 'getSuiteBasename',
        value: function getSuiteBasename(suiteModulePath) {
            var basename = _path2.default.basename(suiteModulePath);
            return basename.replace(/^when(_)?|\.js/ig, '');
        }
    }, {
        key: 'getSuiteBaseFilename',
        value: function getSuiteBaseFilename(suiteModulePath) {
            return _path2.default.basename(suiteModulePath).replace(/^when(_)?/ig, '').replace(/^(.)/, function ($1) {
                return $1.toLowerCase();
            });
        }
    }, {
        key: 'isTopFolder',
        value: function isTopFolder(dirname) {
            return (/spec(s)?$/i.test(dirname)
            );
        }
    }, {
        key: 'getSingleActFilename',
        value: function getSingleActFilename(filenames) {
            var actFilenames = filenames.filter(function (f) {
                return !/^when/i.test(f);
            }).filter(function (f) {
                return (/\.js$/.test(f)
                );
            });

            if (actFilenames.length === 1) return actFilenames[0];
        }
    }, {
        key: 'pathSeparator',
        get: function get() {
            return _path2.default.sep;
        }
    }, {
        key: 'partSeparator',
        get: function get() {
            return ' Â» ';
        }
    }]);

    return nameHelper;
}();

exports.default = nameHelper;
//# sourceMappingURL=nameHelper.js.map