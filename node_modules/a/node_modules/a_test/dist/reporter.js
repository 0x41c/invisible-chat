'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _consoleStyle = require('console-style');

var _consoleStyle2 = _interopRequireDefault(_consoleStyle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var green = _consoleStyle2.default.green,
    yellow = _consoleStyle2.default.yellow,
    red = _consoleStyle2.default.red;

var _l = console.log;

var reporter = function () {
    function reporter() {
        _classCallCheck(this, reporter);
    }

    _createClass(reporter, null, [{
        key: 'setExitCode',
        value: function setExitCode() {
            var _process = process,
                summary = _process.summary;

            process.exitCode = summary.failed + summary.inconclusive + summary.notRunnableSuites;
        }
    }, {
        key: 'ensureStatsInitialized',
        value: function ensureStatsInitialized() {
            if (process.summary) return;
            process.summary = {
                passed: 0,
                failed: 0,
                suites: 0,
                notRunnableSuites: 0,
                inconclusive: 0,
                messages: []
            };
        }
    }, {
        key: 'ok',
        value: function ok(testname) {
            _l(green('  \u2713 ' + testname));
            process.summary.passed++;
        }
    }, {
        key: 'warn',
        value: function warn(message) {
            _l(yellow('\n' + message));
        }
    }, {
        key: 'fail',
        value: function fail(testname) {
            for (var _len = arguments.length, extraArgs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                extraArgs[_key - 1] = arguments[_key];
            }

            var errorMessage = red('   \u2718 ' + testname),
                traceLines = extraArgs.map(function (line) {
                return '        ' + line;
            }).join('\n');
            _l(errorMessage);
            _l(traceLines);

            var summaryMessage = '';
            summaryMessage += '\n' + process.summary.lastSuiteName;
            summaryMessage += '\n' + errorMessage;
            summaryMessage += '\n' + traceLines;
            summaryMessage += '\n------------';

            process.summary.messages.push(summaryMessage);
            process.summary.failed++;
        }
    }, {
        key: 'inconclusive',
        value: function inconclusive(testname) {
            _l(yellow('  ! ' + testname));
            process.summary.inconclusive++;
        }
    }, {
        key: 'suite',
        value: function suite(suite_name) {
            process.summary.lastSuiteName = suite_name;
            _l('\n ' + suite_name);
            process.summary.suites++;
        }
    }, {
        key: 'inconclusiveSuite',
        value: function inconclusiveSuite(suite_name, err) {
            var errorMessage = err.stack || err;

            var msg = red('  ' + errorMessage);
            var summaryMsg = suite_name + '\n' + msg + '\n------------';

            _l(msg);

            process.summary.messages.push(summaryMsg);
        }
    }, {
        key: 'notRunnableSuite',
        value: function notRunnableSuite(suite_name, err) {
            var errorMessage = err.stack || err;

            var msg = red('  ' + errorMessage);
            var summaryMsg = suite_name + '\n' + msg + '\n------------';

            _l(msg);

            process.summary.messages.push(summaryMsg);
            process.summary.notRunnableSuites++;
        }
    }, {
        key: 'summary',
        value: function summary() {
            _l('\n========== Summary =============\n');
            var s = process.summary;

            s.messages.forEach(function (m) {
                _l(' ' + m);
            });

            var summaryMessage = '\n';
            summaryMessage += 'suites: ' + s.suites + ', ';
            summaryMessage += 'passed: ' + green(s.passed) + ', ';
            summaryMessage += 'failed: ' + red(s.failed) + ', ';
            summaryMessage += 'inconclusive: ' + yellow(s.inconclusive) + ', ', summaryMessage += 'not runnable suites: ' + red(s.notRunnableSuites);

            _l(summaryMessage);
        }
    }]);

    return reporter;
}();

exports.default = reporter;
//# sourceMappingURL=reporter.js.map