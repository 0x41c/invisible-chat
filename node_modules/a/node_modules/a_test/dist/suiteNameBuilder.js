'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _nameHelper = require('./nameHelper');

var _nameHelper2 = _interopRequireDefault(_nameHelper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SuiteNameBuilder = function () {
    function SuiteNameBuilder() {
        _classCallCheck(this, SuiteNameBuilder);
    }

    _createClass(SuiteNameBuilder, [{
        key: 'build',
        value: function build(modulePath) {
            this._init(modulePath);
            this._extractSuiteBasename();
            this._extractLeadingDirnames();
            return this._suiteNameParts.join(_nameHelper2.default.partSeparator);
        }
    }, {
        key: '_init',
        value: function _init(modulePath) {
            this._suiteNameParts = [];
            this._pathDirnames = modulePath.split(_nameHelper2.default.pathSeparator);
        }
    }, {
        key: '_extractLeadingDirnames',
        value: function _extractLeadingDirnames() {
            var pathPart = void 0;
            do {
                pathPart = this._pathDirnames.pop();
                this._suiteNameParts.unshift(pathPart);
            } while (!_nameHelper2.default.isTopFolder(pathPart));
        }
    }, {
        key: '_extractSuiteBasename',
        value: function _extractSuiteBasename() {
            var basename = this._pathDirnames.pop();
            this._suiteNameParts.push(_nameHelper2.default.getSuiteBasename(basename));
        }
    }]);

    return SuiteNameBuilder;
}();

exports.default = SuiteNameBuilder;
//# sourceMappingURL=suiteNameBuilder.js.map