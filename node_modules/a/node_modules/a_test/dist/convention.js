'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fsHelper = require('./fsHelper');

var _fsHelper2 = _interopRequireDefault(_fsHelper);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _nameHelper = require('./nameHelper');

var _nameHelper2 = _interopRequireDefault(_nameHelper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Convention = function () {
    function Convention() {
        var fsHelper = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fsHelper2.default();

        _classCallCheck(this, Convention);

        this._fsHelper = fsHelper;
    }

    _createClass(Convention, [{
        key: 'getSuiteBasePath',
        value: function getSuiteBasePath(suiteModulePath) {
            var suiteDirname = _path2.default.dirname(suiteModulePath),
                baseActFilename = _nameHelper2.default.getSuiteBaseFilename(suiteModulePath);

            var baseActInSameDir = _path2.default.join(suiteDirname, baseActFilename);
            if (this._fsHelper.exists(baseActInSameDir)) {
                return baseActInSameDir;
            }

            return this._tryGetFromParentHierarchy(suiteModulePath);
        }
    }, {
        key: 'getActBasePath',
        value: function getActBasePath(actPath) {
            return this._tryGetFromParentHierarchy(actPath);
        }
    }, {
        key: '_tryGetFromParentHierarchy',
        value: function _tryGetFromParentHierarchy(modulePath) {
            var relevantDirs = this._fsHelper.getRelevantDirs(modulePath);
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = relevantDirs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var dir = _step.value;

                    if (_nameHelper2.default.isTopFolder(dir)) continue;

                    var candidatePath = this._tryGetByNameMatchingParentDir(dir);
                    if (candidatePath) return candidatePath;

                    candidatePath = this._tryGetLoneActInParent(dir);
                    if (candidatePath) return candidatePath;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: '_tryGetByNameMatchingParentDir',
        value: function _tryGetByNameMatchingParentDir(dir) {
            var candidatePath = dir + '.js';
            if (this._fsHelper.exists(candidatePath)) {
                return candidatePath;
            }
        }
    }, {
        key: '_tryGetLoneActInParent',
        value: function _tryGetLoneActInParent(dir) {
            var parentDir = _path2.default.resolve(_path2.default.join(dir, '..'));
            var filenames = this._fsHelper.getFilesInDir(parentDir);

            var candidateFilename = _nameHelper2.default.getSingleActFilename(filenames);
            if (candidateFilename) {
                return _path2.default.join(parentDir, candidateFilename);
            }
        }
    }]);

    return Convention;
}();

exports.default = Convention;
//# sourceMappingURL=convention.js.map