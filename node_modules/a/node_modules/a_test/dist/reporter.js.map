{"version":3,"sources":["../src/reporter.js"],"names":["green","yellow","red","_l","console","log","reporter","process","summary","exitCode","failed","inconclusive","notRunnableSuites","passed","suites","messages","testname","message","extraArgs","errorMessage","traceLines","map","line","join","summaryMessage","lastSuiteName","push","suite_name","err","stack","msg","summaryMsg","s","forEach","m"],"mappings":"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","file":"reporter.js","sourcesContent":["import style from 'console-style'\nlet { green, yellow, red } = style;\nlet _l = console.log;\n\nexport default class reporter {\n\n    static setExitCode() {\n        let { summary } = process;\n        process.exitCode = summary.failed + summary.inconclusive + summary.notRunnableSuites;\n    }\n\n    static ensureStatsInitialized() {\n        if (process.summary)\n            return;\n        process.summary = {\n            passed: 0,\n            failed: 0,\n            suites: 0,\n            notRunnableSuites: 0,\n            inconclusive: 0,\n            messages: []\n        };\n    }\n\n    static ok(testname) {\n        _l(green(`  ✓ ${testname}`));\n        process.summary.passed++;\n    }\n\n    static warn(message) {\n        _l(yellow(`\\n${message}`));\n    }\n\n    static fail(testname, ...extraArgs) {\n\n        let errorMessage = red(`   ✘ ${testname}`),\n            traceLines = extraArgs.map(line => {\n                return `        ${line}`;\n            })\n            .join('\\n');\n        _l(errorMessage);\n        _l(traceLines);\n\n        let summaryMessage = '';\n        summaryMessage += `\\n${process.summary.lastSuiteName}`;\n        summaryMessage += `\\n${errorMessage}`\n        summaryMessage += `\\n${traceLines}`\n        summaryMessage += `\\n------------`;\n\n        process.summary.messages.push(summaryMessage);\n        process.summary.failed++;\n    }\n\n    static inconclusive(testname) {\n        _l(yellow(`  ! ${testname}`));\n        process.summary.inconclusive++;\n    }\n\n    static suite(suite_name) {\n        process.summary.lastSuiteName = suite_name;\n        _l(`\\n ${suite_name}`);\n        process.summary.suites++;\n    }\n\n\n    static inconclusiveSuite(suite_name, err) {\n        let errorMessage = err.stack || err;\n\n        let msg = red(`  ${errorMessage}`);\n        let summaryMsg = `${suite_name}\\n${msg}\\n------------`;\n\n        _l(msg);\n\n        process.summary.messages.push(summaryMsg);\n    }\n\n    static notRunnableSuite(suite_name, err) {\n        let errorMessage = err.stack || err;\n\n        let msg = red(`  ${errorMessage}`);\n        let summaryMsg = `${suite_name}\\n${msg}\\n------------`;\n\n        _l(msg);\n\n        process.summary.messages.push(summaryMsg);\n        process.summary.notRunnableSuites++;\n    }\n\n    static summary() {\n        _l('\\n========== Summary =============\\n');\n        let s = process.summary;\n\n        s.messages.forEach(m => {\n            _l(` ${m}`);\n        });\n\n        let summaryMessage = `\\n`;\n        summaryMessage += `suites: ${s.suites}, `;\n        summaryMessage += `passed: ${green(s.passed)}, `\n        summaryMessage += `failed: ${red(s.failed)}, `\n        summaryMessage += `inconclusive: ${yellow(s.inconclusive)}, `,\n        summaryMessage += `not runnable suites: ${red(s.notRunnableSuites)}`;\n\n        _l(summaryMessage);\n    }\n\n\n}\n"]}