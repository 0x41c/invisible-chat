'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _resultFactory = require('./resultFactory');

var _resultFactory2 = _interopRequireDefault(_resultFactory);

var _arrangeActChainFactory = require('./arrangeActChainFactory');

var _arrangeActChainFactory2 = _interopRequireDefault(_arrangeActChainFactory);

var _suiteNameBuilder = require('./suiteNameBuilder');

var _suiteNameBuilder2 = _interopRequireDefault(_suiteNameBuilder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TestSuite = function () {
    function TestSuite() {
        var suiteNameBuilder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _suiteNameBuilder2.default();
        var arrangeActChainFactory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _arrangeActChainFactory2.default();
        var resultFactory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _resultFactory2.default();

        _classCallCheck(this, TestSuite);

        this._suiteNameBuilder = suiteNameBuilder;
        this._arrangeActChainFactory = arrangeActChainFactory;
        this._resultFactory = resultFactory;
    }

    _createClass(TestSuite, [{
        key: 'execute',
        value: function execute(act, context, modulePath) {
            var suiteName = this._suiteNameBuilder.build(modulePath);
            var arrangeActChain = this._arrangeActChainFactory.create(act, context, modulePath);
            return this._resultFactory.create(suiteName, arrangeActChain);
        }
    }]);

    return TestSuite;
}();

exports.default = TestSuite;
//# sourceMappingURL=testSuite.js.map