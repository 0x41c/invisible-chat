{"version":3,"sources":["../src/convention.js"],"names":["Convention","fsHelper","_fsHelper","suiteModulePath","suiteDirname","dirname","baseActFilename","getSuiteBaseFilename","baseActInSameDir","join","exists","_tryGetFromParentHierarchy","actPath","modulePath","relevantDirs","getRelevantDirs","dir","isTopFolder","candidatePath","_tryGetByNameMatchingParentDir","_tryGetLoneActInParent","parentDir","resolve","filenames","getFilesInDir","candidateFilename","getSingleActFilename"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;IAEqBA,U;AAEjB,0BAAuC;AAAA,YAA3BC,QAA2B,uEAAhB,wBAAgB;;AAAA;;AACnC,aAAKC,SAAL,GAAiBD,QAAjB;AACH;;;;yCAEgBE,e,EAAiB;AAC9B,gBAAIC,eAAe,eAAKC,OAAL,CAAaF,eAAb,CAAnB;AAAA,gBACIG,kBAAkB,qBAAWC,oBAAX,CAAgCJ,eAAhC,CADtB;;AAGA,gBAAIK,mBAAmB,eAAKC,IAAL,CAAUL,YAAV,EAAwBE,eAAxB,CAAvB;AACA,gBAAI,KAAKJ,SAAL,CAAeQ,MAAf,CAAsBF,gBAAtB,CAAJ,EAA6C;AACzC,uBAAOA,gBAAP;AACH;;AAED,mBAAO,KAAKG,0BAAL,CAAgCR,eAAhC,CAAP;AACH;;;uCAIcS,O,EAAS;AACpB,mBAAO,KAAKD,0BAAL,CAAgCC,OAAhC,CAAP;AACH;;;mDAE0BC,U,EAAY;AACnC,gBAAIC,eAAe,KAAKZ,SAAL,CAAea,eAAf,CAA+BF,UAA/B,CAAnB;AADmC;AAAA;AAAA;;AAAA;AAEnC,qCAAgBC,YAAhB,8HAA8B;AAAA,wBAArBE,GAAqB;;AAC1B,wBAAI,qBAAWC,WAAX,CAAuBD,GAAvB,CAAJ,EACI;;AAEJ,wBAAIE,gBAAgB,KAAKC,8BAAL,CAAoCH,GAApC,CAApB;AACA,wBAAIE,aAAJ,EACI,OAAOA,aAAP;;AAEJA,oCAAgB,KAAKE,sBAAL,CAA4BJ,GAA5B,CAAhB;AACA,wBAAIE,aAAJ,EACI,OAAOA,aAAP;AACP;AAbkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AActC;;;uDAE8BF,G,EAAK;AAChC,gBAAIE,gBAAmBF,GAAnB,QAAJ;AACA,gBAAI,KAAKd,SAAL,CAAeQ,MAAf,CAAsBQ,aAAtB,CAAJ,EAA0C;AACtC,uBAAOA,aAAP;AACH;AACJ;;;+CAEsBF,G,EAAK;AACxB,gBAAIK,YAAY,eAAKC,OAAL,CAAa,eAAKb,IAAL,CAAUO,GAAV,EAAe,IAAf,CAAb,CAAhB;AACA,gBAAIO,YAAY,KAAKrB,SAAL,CAAesB,aAAf,CAA6BH,SAA7B,CAAhB;;AAEA,gBAAII,oBAAoB,qBAAWC,oBAAX,CAAgCH,SAAhC,CAAxB;AACA,gBAAIE,iBAAJ,EAAuB;AACnB,uBAAO,eAAKhB,IAAL,CAAUY,SAAV,EAAqBI,iBAArB,CAAP;AACH;AAEJ;;;;;;kBAxDgBzB,U","file":"convention.js","sourcesContent":["import FsHelper from './fsHelper';\nimport path from 'path';\nimport nameHelper from './nameHelper';\n\nexport default class Convention {\n\n    constructor(fsHelper = new FsHelper()) {\n        this._fsHelper = fsHelper;\n    }\n\n    getSuiteBasePath(suiteModulePath) {\n        let suiteDirname = path.dirname(suiteModulePath),\n            baseActFilename = nameHelper.getSuiteBaseFilename(suiteModulePath);\n\n        let baseActInSameDir = path.join(suiteDirname, baseActFilename);\n        if (this._fsHelper.exists(baseActInSameDir)) {\n            return baseActInSameDir;\n        }\n\n        return this._tryGetFromParentHierarchy(suiteModulePath);\n    }\n\n\n\n    getActBasePath(actPath) {\n        return this._tryGetFromParentHierarchy(actPath);\n    }\n\n    _tryGetFromParentHierarchy(modulePath) {\n        let relevantDirs = this._fsHelper.getRelevantDirs(modulePath);\n        for (let dir of relevantDirs) {\n            if (nameHelper.isTopFolder(dir))\n                continue;\n\n            let candidatePath = this._tryGetByNameMatchingParentDir(dir);\n            if (candidatePath)\n                return candidatePath;\n\n            candidatePath = this._tryGetLoneActInParent(dir);\n            if (candidatePath)\n                return candidatePath;\n        }\n    }\n\n    _tryGetByNameMatchingParentDir(dir) {\n        let candidatePath = `${dir}.js`;\n        if (this._fsHelper.exists(candidatePath)) {\n            return candidatePath;\n        }\n    }\n\n    _tryGetLoneActInParent(dir) {\n        let parentDir = path.resolve(path.join(dir, '..'));\n        let filenames = this._fsHelper.getFilesInDir(parentDir);\n\n        let candidateFilename = nameHelper.getSingleActFilename(filenames);\n        if (candidateFilename) {\n            return path.join(parentDir, candidateFilename);\n        }\n\n    }\n}"]}