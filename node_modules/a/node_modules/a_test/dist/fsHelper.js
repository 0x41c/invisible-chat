'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nameHelper = require('./nameHelper');

var _nameHelper2 = _interopRequireDefault(_nameHelper);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FsHelper = function () {
    function FsHelper() {
        var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _path2.default;
        var fs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _fs2.default;

        _classCallCheck(this, FsHelper);

        this._path = path;
        this._fs = fs;
    }

    _createClass(FsHelper, [{
        key: 'getRelevantDirs',
        value: function getRelevantDirs(suiteModulePath) {
            var result = [];
            var suiteModuleDirPath = this._path.dirname(suiteModulePath);
            var dirnames = suiteModuleDirPath.split(this._path.sep);

            var currentDirname = void 0;
            while (!_nameHelper2.default.isTopFolder(currentDirname)) {
                result.push(dirnames.join(this._path.sep));
                currentDirname = dirnames.pop();
            }
            return result;
        }
    }, {
        key: 'getFilesInDir',
        value: function getFilesInDir(path) {
            return this._fs.readdirSync(path);
        }
    }, {
        key: 'exists',
        value: function exists(path) {
            return this._fs.existsSync(path);
        }
    }]);

    return FsHelper;
}();

exports.default = FsHelper;
//# sourceMappingURL=fsHelper.js.map